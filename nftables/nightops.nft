#!/usr/bin/nft -f
flush ruleset

# wan
define WAN_IFACE = eth0

# vpn
define VPN_UDP_IFACE = ops
define VPN_UDP_NET = 10.0.69.0/24
define VPN_UDP_PORT = 6969

define VPN_TCP_IFACE = opsraw
define VPN_TCP_NET = 10.0.70.0/24
define VPN_TCP_PORT = 6970

define VPN_TCP_UDP2RAW_PORT = 6971

# netns
define DOCKER_IFACE = docker0
define DOCKER_NS_IFACE_IP = 10.0.100.1

# allow ports
define TCP_ALLOW = { 80,443,3131,8006 }
#define UDP_ALLOW = { }

# groups
define NETNS_IF = { $DOCKER_IFACE }
define VPN_IF = { $VPN_UDP_IFACE, $VPN_TCP_IFACE}
define VPN_PORT = { $VPN_UDP_PORT, $VPN_TCP_PORT }

table ip myfilter {
    # FILTER<-INPUT
    chain input {
        type filter hook input priority filter; policy drop;
        ct state established,related counter accept
        iifname "lo" counter accept
        iifname $NETNS_IF counter accept
        iifname $VPN_IF counter accept
        iifname $WAN_IFACE tcp dport $TCP_ALLOW counter accept
#       iifname $WAN_IFACE udp dport $UDP_ALLOW counter accept
        iifname $WAN_IFACE udp dport 33434-33524 limit rate 500/second counter accept
        iifname $WAN_IFACE icmp type { echo-reply, echo-request } limit rate 2000/second counter accept
        iifname $WAN_IFACE ip protocol icmp counter accept
        iifname $WAN_IFACE udp dport $VPN_PORT counter accept
        iifname $WAN_IFACE tcp dport $VPN_TCP_UDP2RAW_PORT counter accept
    }

    # FILTER<-FORWARD
    chain forward {
        type filter hook forward priority filter; policy drop;
        ct state established,related counter accept
        iifname $NETNS_IF counter accept
        iifname $VPN_IF counter accept
        iifname $WAN_IFACE oifname $NETNS_IF counter accept
    }

    # FILTER<-OUTPUT
    chain output {
        type filter hook output priority filter; policy accept;
    }
}

# NAT
table ip mynat {
    # NAT<-POSTROUTING
    chain postrouting {
        type nat hook postrouting priority srcnat; policy accept;
        iifname $VPN_UDP_IFACE oifname $WAN_IFACE ip saddr $VPN_UDP_NET counter masquerade
        iifname $VPN_TCP_IFACE oifname $WAN_IFACE ip saddr $VPN_TCP_NET counter masquerade
        iifname $NETNS_IF oifname { $WAN_IFACE, $VPN_IF } counter masquerade
    }

    # NAT<-PREROUTING
    chain prerouting {
        type nat hook prerouting priority dstnat; policy accept;
        iifname { $WAN_IFACE, $VPN_IF } fib daddr type local udp dport 10000 counter dnat to $DOCKER_NS_IFACE_IP:10000
    }
}
